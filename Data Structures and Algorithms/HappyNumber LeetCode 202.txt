LeetCode 202--Happy Number

Write an algorithm to determine if a number n is happy. (202)
A happy number is a number defined by the following process:
Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

19 ==> 1^2 + 9^2 ==> 1 + 81 ==> 82
 
Example 1:
Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1

Example 2:
Input: n = 2
Output: false

=============One Answer====================
static bool HappyNumber(int number) {

    HashSet<int> numbers = new HashSet<int>();
 
    while(!numbers.Contains(number) && number != 1) {

        numbers.Add(number);

        number = SumOfDigits(number);

    }
 
    return number == 1;

}
============Different Answer=====================
static bool IsHappy(int n) {
        int sum = n;
        HashSet<int> set = new HashSet<int>();
        while (sum != 1)
        {
            if (set.Contains(sum))
            {
                return false;
            }
            set.Add(sum);
            sum = SumOfDigitsSquare(sum);
        }
        return true;
    }


int SumofDigitsSquare(int n)
{
	int sum = 0;
	currentDigit = 0;
	while(n>0)
	{
		currentDigit = n%10
		sum += currentDigit * currentDigit
		n=n/10
	}
	return sum;
}