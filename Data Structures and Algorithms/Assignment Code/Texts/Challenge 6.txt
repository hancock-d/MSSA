Challenge 6 Rotate Matrix

Time complexity(?) will be n^2
Space Complexity will be constant

You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

Example 1:
IMAGE
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

Example 2:
IMAGE
Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]

=====

20feb 2h14m for review
solution at 2h17m

Transpose first then reversal
	Transpose--rows become cols, cols become rows
123	  147	    741
456  ==>  258  ==>  852
789	  369	    963

Then reverse them (swap 1-7, 2-8, 3-9 on transposed matrix)

int[,] matrixArray = 
{1,2,3}
{4,5,6}...

public static void RotateMatrix(int[,] matrix)
for int(i=0 i< matrix.getlength(0); i++
for (int j=i, j<matrix.getlength(1); j++
int oldposition = matrix[i, j]

matrix[i,j] = matrix j,i
matrix j,i = oldposition

printmatrix(matrix)
{
for int i=0, i < matrix.getlength(0); i++
for int j=0, j<getlength(0) /2; j++
int oldposition = matrix i,j
matrix i,j = matrix[i, matrix.getlength(1) -j-1];
matrix[i, matrix.getlength(1) -j-1 = oldposition
}
}
printmatrix(matrix);
}

public static void ptrintmatrix(int[,] matrix)
