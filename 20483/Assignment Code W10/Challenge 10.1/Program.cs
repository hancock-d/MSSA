namespace Challenge_10._1
{
    internal class Program
    {
        ///10.1 Find Added Letter
        /*
        You are given two strings s and t.
        String t is generated by random shuffling string s and then add one more letter at a random position.
        Return the letter that was added to t.
        Example 1.
        Input: s = "abcd", t = "abcde"
        Output: "e"
        Explanation: 'e' is the letter that was added.
        Example 2:
        Input: s = "", t = "y"
        Output: "y"
        */


        public static char FindAddedLetter(string s, string t)
        {
            HashSet<char> set = new HashSet<char>();

            foreach (char c in s)
            {
                set.Add(c);
            }
            foreach (char c in t)
            {
                if (!set.Contains(c))
                {
                    return c;
                }
            }
            return ' ';
        } //Couldn't handle duplicates

        public static char FindExtraLetter(string s, string t)
        {
            Dictionary<char, int> dict = new Dictionary<char, int>();

            foreach (char c in s)
            {
                if (dict.ContainsKey(c))
                {
                    dict[c]++;
                }
                else
                    dict[c] = 1;
            }
            foreach (char c in t)
            {
                if (!dict.ContainsKey(c) || dict[c] == 0)
                {
                    return c;
                }
                dict[c]--; //helps find duplicates
            }
            return ' ';
        }

        ///10.2 Merge Sorted ARray
        //Create a pointer for the last index of each array
        //Create pointer for last index of nums1 array (where everything is going)
        //Compare pointers, insert larger into merged/nums1 array, decrement
        //

        public static void MergeArrays(int[] nums1, int m, int[] nums2, int n)
        {
            int index1 = m - 1; //pointer for nums1
            int index2 = n - 1; //pointer for nums2
            int mergeIndex = m + n - 1; //pointer for placement in (new) nums1

            while (index1 >= 0 && index2 >= 0)
            {
                if (nums1[index1] > nums2[index2])
                {
                    nums1[mergeIndex] = nums1[index1];
                    index1--;
                }
                else
                {
                    nums1[mergeIndex] = nums2[index2];
                    index2--;
                }
                mergeIndex--;
            }
            while (index2 >= 0) //only for second array since nums1/merged array will already have the rest of it in order
            {
                nums1[mergeIndex] = nums2[index2];
                index2--;
                mergeIndex--;
            }

        }

        static void PrintArray(int[] arr)
        {
            foreach (int i in arr)
            {
                Console.Write(i + " ");
            }
            Console.WriteLine();
        }

        static void Main(string[] args)
        {
            Console.WriteLine("----------------10.1 Find Added Letter");
            string s = "abcd";
            string t = "abcde";
            string s2 = "";
            string t2 = "y";
            string s3 = "bjgdke";
            string t3 = "bjggdke";

            Console.WriteLine($"Example 1: {FindExtraLetter(s, t)}"); //e
            Console.WriteLine($"Example 2: {FindExtraLetter(s2, t2)}"); //y
            Console.WriteLine($"Example 3: {FindExtraLetter(s3, t3)}"); //g
            Console.WriteLine();

            Console.WriteLine("---------------10.2 Merge Sorted Array");
            int[] nums1 = { 1, 2, 3, 0, 0, 0 };
            int a = 3;
            int[] nums2 = { 2, 5, 6 };
            int b = 3;

            int[] nums3 = { 1 };
            int c = 1;
            int[] nums4 = { };
            int d = 0;

            int[] nums5 = { 0 };
            int e = 0;
            int[] nums6 = { 1 };
            int f = 1;

            Console.WriteLine("Example 1: ");
            MergeArrays(nums1, a, nums2, b);
            PrintArray(nums1); // 1,2,2,3,5,6
            Console.WriteLine("Example 2:");
            MergeArrays(nums3, c, nums4, d);
            PrintArray(nums3); // 1
            Console.WriteLine("Example 3:");
            MergeArrays(nums5, e, nums6, f);
            PrintArray(nums5); // 1

        }
    }
}
